aasv10应用类加载机制：
1，应用的类加载器类：com.apusic.aas.web.loader.WebappClassLoader，它的祖先classloader依次是：
   (1)DelegatingClassLoader:负责加载ApusicAS\aas\lib\install\applications\jmsra、ApusicAS\aas\lib\install\applications\jaxr-ra...等这些类;
   (2)Common class loader:负责加载lib/*.jar:domain_dir/lib/classes:domain_dir/lib/*.jar:DERBY_DRIVERS等类;
   (3)APIClassLoader:委托一个特殊的OSGi模块类加载器去加载类，这个特殊的模块类加载器可以加载所有其他模块export的类；
   (4)ExtClassLoader:jdk的扩展类加载器
2,WebappClassLoader的加载逻辑如下：
	(1),查找已加载的类，找到就返回;
	(2),如果需要代理给parent classloader，就调用parent classloader的loadClass，找到了就返回;
		(2.1)如果delegate=true（默认为true），或者就算delegate为false，但是应该代理到parent的，就继续往下判断，否则返回false，即不需要代理到parent。判断是否应该代理到parent的逻辑如下：
			(2.1.1)如果是java开头的类，则应该代理到parent;
			(2.1.2)如果是overridablePackages,则不应该代理到parent;
			(2.1.3)如果在includPkgList中，则应该代理到parent;
			(2.1.4)如果在javax, sun, org.xml.sax, org.w3c.dom, org.apache.taglibs.standard, com.sun.faces, org.apache.commons.logging包中类，则应该代理到parent;
			(2.1.5)否则不应该代理
		(2.2)判断是否是应用优先的类，如果是则不需要代理到parent，否则需要代理。判断是否是应用优先的类的逻辑如下：
			(2.2.1)java开头的类都不是应用优先;
			(2.2.2)delegate=false都不是应用优先;
			(2.2.3)属于preferAppPkgList且不属于[javax, sun, org.xml.sax, org.w3c.dom, org.apache.taglibs.standard, com.sun.faces, org.apache.commons.logging]和includPkgList的应用优先;
			(2.2.4)否则都不是应用优先		
	(3),查找应用的类，找到了就返回;
	(4),根据第2步的判断结果,如果不需要代理给parent classloader，就调用parent classloader的loadClass方法，找到了就返回；
	(5),抛ClassNotFoundException
3,配置:
	(3.1)delegate、includPkgList、preferAppPkgList分别对应apusic-web.xml的class-loader元素的delegate、include-pkg、prefer-app-pkg属性，package之间用;分隔;
	(3.2)overridablePackages对应系统属性:com.sun.enterprise.overrideablejavaxpackages,再加上代码写死的jsf的类;

	